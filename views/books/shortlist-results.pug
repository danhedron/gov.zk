//- vim:ft=jade
extends ../skeleton
block title
  title #{__('shortlist-results')}
block breadcrumb
  li
    a(href='/book-club') #{__('book-club')}
  li
    a(href='/book-club/short-list') #{__('shortlist-results')}
block content
  - electorCount = Object.keys(electorate).length
  - max = books.length * electorCount
  - unanimousBooks = 0
  .grid-row
    .column-full
      h1.heading-xlarge #{__('shortlist-results')}
  .grid-row
    .column-two-thirds
      table
        thead
          tr
            th(colspan="3") #{__('shortlist-flags')}
            th #{__('shortlist-candidate')}
            th.numeric #{__('shortlist-approvals')}
            th.numeric
              abbr(title=__('shortlist-sav')) #{__('shortlist-sav-abbr')}
        if results.length == 0
          tr
            td(colspan="7",style="text-align:center") #{__('shortlist-waiting')}
        for result in results
          tr
            if result.readingList
              td(colspan="3").center.green #{__('shortlist-selected', {'note': result.readingList})}
            else
              td
                if result.longlistedBy === req.user
                  abbr.green(title=__('shortlist-flag-longlisted'))  &#9998;
              td
                if result.difficult
                  abbr.red(title=__('shortlist-flag-difficult')) &#9936;
              td
                if result.alreadyRead && result.alreadyRead.length > 0
                  abbr.read(title=__('shortlist-flag-alreadyread')) ðŸ“– 
            td
              strong
                a(href='/book-club/book/' + result.isbn) #{result.title}
              br
              span  #{result.author}

            if result.approve.length == 0
              td.numeric â€”
              td.numeric â€”
            else
              if result.approve.length === electorCount
                - unanimousBooks++
                td.numeric(title=__('shortlist-approvals-allapproved')).unanimous #{result.approve.length}
              else
                if result.approve.length > 0 && result.disapprove.length === 0
                  td.numeric(title=__('shortlist-approvals-nodownvotes')).almost-unanimous #{result.approve.length}
                else
                  td.numeric(title=result.approve.join(', ')) #{result.approve.length}
              - sav = (result.scaledSav/100*Object.keys(electorate).length).toFixed(2)
              td.numeric #{sav}
    .column-one-third
      table
        thead
          tr
            th #{__('shortlist-person-elector')}
            th.numeric #{__('shortlist-person-votes')}
            th.numeric
              abbr(title=__('shortlist-person-approval-percent')) #{__('shortlist-person-approval-percent-abbr')}
        - sum = 0
        for elector in Object.keys(electorate)
          - sum += electorate[elector].total
          tr
            td #{elector}
            if electorate[elector].total == 0
              td.numeric #{__('shortlist-person-nil')}
            else
              if electorate[elector].total == books.length
                td.numeric #{__('shortlist-person-complete')}
              else if electorate[elector].total > books.length
                td.numeric.red #{__('shortlist-person-progress-overrun', {'count': electorate[elector].total, 'total': books.length})}
              else
                td.numeric #{__('shortlist-person-progress', {'count': electorate[elector].total, 'total': books.length})}
            td.numeric(title=__('shortlist-person-approval-count', {'count':electorate[elector].approve})).
              #{__('shortlist-person-approval-percent-cell', {'percent': Math.round((electorate[elector].approve/electorate[elector].total)*100)})}

      p #{__('shortlist-progress', {sum, max})}
      p
        .data
          span.data-item.bold-xlarge #{unanimousBooks}
          span.data-item.bold-xsmall #{__('shortlist-stat-unanimous')}
      p.
        The shortlist is created using the <a href="//en.wikipedia.org/wiki/Approval_voting">Approval Voting</a>
        electoral system.

        It is a simple way to vote on a large number of candidates without having to rank them
        individually.

        The winner is the candidate with the most number of approvals (yes votes).
      hr
      p.
        For comparison, the results of <a href="//en.wikipedia.org/wiki/Satisfaction_approval_voting">satisfaction approval voting</a>
        are also provided.

        This is similar to approval voting, except that each elector has one vote shared between all
        their approvals, so each approval from a voter that votes five times is worth one fifth; and
        a voter who votes ten times has their approval worth one tenth.
      p.
        This has the effect of looking at how "satisfied" a voter is with an outcome: it tends to
        return more diverse candidates than vanilla approval voting (which is usually only used for
        single-winner elections).

      p.
        SAV ususally results in an unwieldy irrational number, so the results displayed have been scaled
        to be a value between 0 and #{Object.keys(electorate).length}.
      hr
      if state.allowVoting
        if sum !== max
          p #{__('shortlist-polls-incomplete')}
        else
          p #{__('shortlist-polls-completebutopen')}
      else
        p #{__('shortlist-polls-closed')}
  .grid-row
     .column-full
